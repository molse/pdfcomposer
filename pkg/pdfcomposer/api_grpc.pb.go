// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: server/api/api.proto

package pdfcomposer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PdfComposeServiceClient is the client API for PdfComposeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfComposeServiceClient interface {
	// Send file to pdf compose
	// Returns Status.BAD_REQUEST if there are any errors on input parameters
	// Returns Status.INTERNAL if any internal error occured
	// Returns pdf file
	SendFile(ctx context.Context, opts ...grpc.CallOption) (PdfComposeService_SendFileClient, error)
}

type pdfComposeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfComposeServiceClient(cc grpc.ClientConnInterface) PdfComposeServiceClient {
	return &pdfComposeServiceClient{cc}
}

func (c *pdfComposeServiceClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (PdfComposeService_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &PdfComposeService_ServiceDesc.Streams[0], "/pdfcompose.PdfComposeService/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &pdfComposeServiceSendFileClient{stream}
	return x, nil
}

type PdfComposeService_SendFileClient interface {
	Send(*Images) error
	CloseAndRecv() (*Pdf, error)
	grpc.ClientStream
}

type pdfComposeServiceSendFileClient struct {
	grpc.ClientStream
}

func (x *pdfComposeServiceSendFileClient) Send(m *Images) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pdfComposeServiceSendFileClient) CloseAndRecv() (*Pdf, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Pdf)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdfComposeServiceServer is the server API for PdfComposeService service.
// All implementations must embed UnimplementedPdfComposeServiceServer
// for forward compatibility
type PdfComposeServiceServer interface {
	// Send file to pdf compose
	// Returns Status.BAD_REQUEST if there are any errors on input parameters
	// Returns Status.INTERNAL if any internal error occured
	// Returns pdf file
	SendFile(PdfComposeService_SendFileServer) error
	mustEmbedUnimplementedPdfComposeServiceServer()
}

// UnimplementedPdfComposeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPdfComposeServiceServer struct {
}

func (UnimplementedPdfComposeServiceServer) SendFile(PdfComposeService_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedPdfComposeServiceServer) mustEmbedUnimplementedPdfComposeServiceServer() {}

// UnsafePdfComposeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfComposeServiceServer will
// result in compilation errors.
type UnsafePdfComposeServiceServer interface {
	mustEmbedUnimplementedPdfComposeServiceServer()
}

func RegisterPdfComposeServiceServer(s grpc.ServiceRegistrar, srv PdfComposeServiceServer) {
	s.RegisterService(&PdfComposeService_ServiceDesc, srv)
}

func _PdfComposeService_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PdfComposeServiceServer).SendFile(&pdfComposeServiceSendFileServer{stream})
}

type PdfComposeService_SendFileServer interface {
	SendAndClose(*Pdf) error
	Recv() (*Images, error)
	grpc.ServerStream
}

type pdfComposeServiceSendFileServer struct {
	grpc.ServerStream
}

func (x *pdfComposeServiceSendFileServer) SendAndClose(m *Pdf) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pdfComposeServiceSendFileServer) Recv() (*Images, error) {
	m := new(Images)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdfComposeService_ServiceDesc is the grpc.ServiceDesc for PdfComposeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfComposeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfcompose.PdfComposeService",
	HandlerType: (*PdfComposeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _PdfComposeService_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "server/api/api.proto",
}
