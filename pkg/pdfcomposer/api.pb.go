// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/api/api.proto

package pdfcomposer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Pdf struct {
	File                 []byte   `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pdf) Reset()         { *m = Pdf{} }
func (m *Pdf) String() string { return proto.CompactTextString(m) }
func (*Pdf) ProtoMessage()    {}
func (*Pdf) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffe71976e461794, []int{0}
}

func (m *Pdf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pdf.Unmarshal(m, b)
}
func (m *Pdf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pdf.Marshal(b, m, deterministic)
}
func (m *Pdf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pdf.Merge(m, src)
}
func (m *Pdf) XXX_Size() int {
	return xxx_messageInfo_Pdf.Size(m)
}
func (m *Pdf) XXX_DiscardUnknown() {
	xxx_messageInfo_Pdf.DiscardUnknown(m)
}

var xxx_messageInfo_Pdf proto.InternalMessageInfo

func (m *Pdf) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type Images struct {
	Image1               []byte   `protobuf:"bytes,1,opt,name=Image1,proto3" json:"Image1,omitempty"`
	Image2               []byte   `protobuf:"bytes,2,opt,name=Image2,proto3" json:"Image2,omitempty"`
	Image3               []byte   `protobuf:"bytes,3,opt,name=Image3,proto3" json:"Image3,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Images) Reset()         { *m = Images{} }
func (m *Images) String() string { return proto.CompactTextString(m) }
func (*Images) ProtoMessage()    {}
func (*Images) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffe71976e461794, []int{1}
}

func (m *Images) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Images.Unmarshal(m, b)
}
func (m *Images) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Images.Marshal(b, m, deterministic)
}
func (m *Images) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Images.Merge(m, src)
}
func (m *Images) XXX_Size() int {
	return xxx_messageInfo_Images.Size(m)
}
func (m *Images) XXX_DiscardUnknown() {
	xxx_messageInfo_Images.DiscardUnknown(m)
}

var xxx_messageInfo_Images proto.InternalMessageInfo

func (m *Images) GetImage1() []byte {
	if m != nil {
		return m.Image1
	}
	return nil
}

func (m *Images) GetImage2() []byte {
	if m != nil {
		return m.Image2
	}
	return nil
}

func (m *Images) GetImage3() []byte {
	if m != nil {
		return m.Image3
	}
	return nil
}

func init() {
	proto.RegisterType((*Pdf)(nil), "pdfcompose.Pdf")
	proto.RegisterType((*Images)(nil), "pdfcompose.Images")
}

func init() { proto.RegisterFile("server/api/api.proto", fileDescriptor_9ffe71976e461794) }

var fileDescriptor_9ffe71976e461794 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x4f, 0x2c, 0xc8, 0x04, 0x61, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xae,
	0x82, 0x94, 0xb4, 0xe4, 0xfc, 0xdc, 0x82, 0xfc, 0xe2, 0x54, 0x25, 0x49, 0x2e, 0xe6, 0x80, 0x94,
	0x34, 0x21, 0x21, 0x2e, 0x16, 0xb7, 0xcc, 0x9c, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20,
	0x30, 0x5b, 0x29, 0x80, 0x8b, 0xcd, 0x33, 0x37, 0x31, 0x3d, 0xb5, 0x58, 0x48, 0x0c, 0xca, 0x32,
	0x84, 0xca, 0x43, 0x79, 0x70, 0x71, 0x23, 0x09, 0x26, 0x24, 0x71, 0x23, 0xb8, 0xb8, 0xb1, 0x04,
	0x33, 0x92, 0xb8, 0xb1, 0x91, 0x1b, 0x97, 0x60, 0x40, 0x4a, 0x9a, 0x33, 0xc4, 0xea, 0xe0, 0xd4,
	0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x43, 0x2e, 0x8e, 0xe0, 0xd4, 0xbc, 0x14, 0x90, 0x95, 0x42,
	0x42, 0x7a, 0x08, 0xa7, 0xe9, 0x41, 0x2c, 0x97, 0xe2, 0x47, 0x16, 0x0b, 0x48, 0x49, 0x53, 0x62,
	0x70, 0x12, 0x8c, 0xe2, 0x2f, 0xc8, 0x4e, 0xd7, 0x47, 0x88, 0x17, 0x25, 0xb1, 0x81, 0xbd, 0x66,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xd8, 0x7b, 0x9c, 0xf2, 0x00, 0x00, 0x00,
}
