// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/api/api.proto

package pdfcomposer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileResponse struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileResponse) Reset()         { *m = FileResponse{} }
func (m *FileResponse) String() string { return proto.CompactTextString(m) }
func (*FileResponse) ProtoMessage()    {}
func (*FileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffe71976e461794, []int{0}
}

func (m *FileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileResponse.Unmarshal(m, b)
}
func (m *FileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileResponse.Marshal(b, m, deterministic)
}
func (m *FileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileResponse.Merge(m, src)
}
func (m *FileResponse) XXX_Size() int {
	return xxx_messageInfo_FileResponse.Size(m)
}
func (m *FileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FileResponse proto.InternalMessageInfo

func (m *FileResponse) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type FileRequest struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileRequest) Reset()         { *m = FileRequest{} }
func (m *FileRequest) String() string { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()    {}
func (*FileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ffe71976e461794, []int{1}
}

func (m *FileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileRequest.Unmarshal(m, b)
}
func (m *FileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileRequest.Marshal(b, m, deterministic)
}
func (m *FileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRequest.Merge(m, src)
}
func (m *FileRequest) XXX_Size() int {
	return xxx_messageInfo_FileRequest.Size(m)
}
func (m *FileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileRequest proto.InternalMessageInfo

func (m *FileRequest) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*FileResponse)(nil), "pdfcompose.FileResponse")
	proto.RegisterType((*FileRequest)(nil), "pdfcompose.FileRequest")
}

func init() { proto.RegisterFile("server/api/api.proto", fileDescriptor_9ffe71976e461794) }

var fileDescriptor_9ffe71976e461794 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x4f, 0x2c, 0xc8, 0x04, 0x61, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xae,
	0x82, 0x94, 0xb4, 0xe4, 0xfc, 0xdc, 0x82, 0xfc, 0xe2, 0x54, 0x25, 0x15, 0x2e, 0x1e, 0xb7, 0xcc,
	0x9c, 0xd4, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0xe4, 0x8c,
	0xd2, 0xbc, 0x6c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x08, 0x47, 0x49, 0x99, 0x8b, 0x1b,
	0xa2, 0xaa, 0xb0, 0x34, 0xb5, 0xb8, 0x04, 0xbb, 0x22, 0xa3, 0x08, 0x2e, 0xc1, 0x80, 0x94, 0x34,
	0x67, 0x88, 0xc1, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xce, 0x5c, 0x1c, 0xc1, 0xa9,
	0x79, 0x29, 0x20, 0xdd, 0x42, 0xe2, 0x7a, 0x08, 0x8b, 0xf5, 0x90, 0xcc, 0x93, 0x92, 0xc0, 0x94,
	0x80, 0x38, 0x47, 0x89, 0x41, 0x83, 0xd1, 0x80, 0xd1, 0x49, 0x30, 0x8a, 0xbf, 0x20, 0x3b, 0x5d,
	0x1f, 0xa1, 0xa8, 0x28, 0x89, 0x0d, 0xec, 0x15, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23,
	0x2a, 0x17, 0xa4, 0xe2, 0x00, 0x00, 0x00,
}
